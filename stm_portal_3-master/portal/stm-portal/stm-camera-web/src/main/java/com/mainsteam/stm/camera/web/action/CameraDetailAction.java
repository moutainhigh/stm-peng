package com.mainsteam.stm.camera.web.action;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.mainsteam.stm.common.metric.MetricDataService;
import com.mainsteam.stm.common.metric.obj.MetricData;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.alibaba.fastjson.JSONObject;
import com.mainsteam.stm.camera.api.ICameraService;
import com.mainsteam.stm.camera.web.vo.CustomGroupVo;
import com.mainsteam.stm.instancelib.ResourceInstanceService;
import com.mainsteam.stm.instancelib.exception.InstancelibException;
import com.mainsteam.stm.instancelib.obj.ResourceInstance;
import com.mainsteam.stm.platform.web.action.BaseAction;
import com.mainsteam.stm.platform.web.vo.ILoginUser;
import com.mainsteam.stm.portal.resource.api.ICustomResourceGroupApi;
import com.mainsteam.stm.portal.resource.api.IResourceDetailInfoApi;
import com.mainsteam.stm.portal.resource.bo.CustomGroupBo;
import com.mainsteam.stm.util.SecureUtil;

@Controller
@RequestMapping({ "/portal/resource/cameradetail" })
public class CameraDetailAction extends BaseAction {
	private Logger logger = Logger.getLogger(CameraDetailAction.class);

	public static final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	@Resource
	private ResourceInstanceService resourceInstanceService;

	@Resource(name = "resourceDetailInfoApi")
	private IResourceDetailInfoApi resourceDetailInfoApi;

	@Resource
	private ICameraService cameraService;

	@Resource
	private ICustomResourceGroupApi customResourceGroupApi;

    @Resource
    private MetricDataService metricDataService;

	@RequestMapping({ "/getCameraDetail" })
	public JSONObject getMetric4General(Long instanceId,HttpSession session) {
		ILoginUser user = getLoginUser(session);
		return toSuccess(cameraService.getCameraDetial(instanceId,user));
	}

	@RequestMapping({ "/getCameraConInfo" })
	public JSONObject getCameraConInfo(Long instanceId) {
		return toSuccess(cameraService.getCameraConInfo(instanceId));
	}

	@RequestMapping({ "/getIsCamera" })
	public JSONObject getIsCamera(Long instanceId) {
		Map<String, String> returnObj = new HashMap<String, String>();
		try {
			ResourceInstance instance = resourceInstanceService.getResourceInstance(instanceId);
			if (instance != null && instance.getCategoryId() != null && instance.getCategoryId().equalsIgnoreCase("SurveillanceCamera")) {
				returnObj.put("result", "1");
				logger.info("Is Camera, ID:" +  instanceId +  " name:" + instance.getShowName() + " Result: " + JSONObject.toJSONString(returnObj));
			} else {
				returnObj.put("result", "0");
				logger.info("NOT Camera, ID:" +  instanceId );
			}
			
		} catch (InstancelibException e) {
			logger.error(e.getMessage());
		}

		return toSuccess(returnObj);
	}

	// 判断是否为视频诊断分组及其子分组
	@RequestMapping({ "/getIsCameraGroup" })
	public JSONObject getIsCameraGroup(long id, HttpSession session) {
		int result = 0;
		List<CustomGroupBo> list = cameraService.getList(getLoginUser(session).getId().longValue());
		Map<String, CustomGroupBo> allGroups = new HashMap<String, CustomGroupBo>();
		for (CustomGroupBo bo : list) {
			allGroups.put(String.valueOf(bo.getId()), bo);
		}
		if (id == 999999L) {
			result = 1;
		} else {
			result = isCameraGroup(id, allGroups);
		}
		logger.info("Is Camera Group, ID:" +  id +  " Result: " + result);
		Map<String, String> returnObj = new HashMap<String, String>();
		returnObj.put("result", String.valueOf(result));
		return toSuccess(returnObj);
	}

	public int isCameraGroup(long id, Map<String, CustomGroupBo> allGroups) {
		int result = 0;
		if (id == 999999L) {
			result = 1;
		} else {
			CustomGroupBo cameraGroup = allGroups.get(String.valueOf(id));
			if (cameraGroup.getPid() != null) {
				result = isCameraGroup(cameraGroup.getPid(), allGroups);
			} else {
				result = 0;
			}
		}
		return result;
	}

	@RequestMapping({ "/getAllCustomGroup" })
	public JSONObject getAllCustomGroup(HttpSession session) {
		List<CustomGroupBo> list = cameraService.getList(getLoginUser(session).getId().longValue());

		List<CustomGroupVo> voList = new ArrayList();
		for (CustomGroupBo bo : list) {
			CustomGroupVo vo = toVo(bo);
			voList.add(vo);
		}
		List<CustomGroupVo> newVoList = new ArrayList();
		for (CustomGroupVo vo : voList) {
			if (vo.getPid() == null) {
				voList2Tree(vo, voList);
				newVoList.add(vo);
			}
		}
		return toSuccess(newVoList);
	}

	@RequestMapping({ "/getFileInputStream" })
	public void getFileInputStream(HttpServletRequest request, HttpServletResponse response) {
		String id = request.getParameter("instanceId").toString();
		long instanceId = 0L;
		if (id != null) {
			instanceId = Long.parseLong(id);
		}
		Connection con = null;
		Statement stmt = null;
		InputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			bos = new BufferedOutputStream(response.getOutputStream());
			//获取channId
            MetricData metricData = metricDataService.catchRealtimeMetricData(instanceId, "lastImage");
            String[] data = metricData.getData();
            //logger.error("img####:   "+JSONObject.toJSONString(data));
            if(data != null && data.length > 0){
                String img = data[0];
                //String img = "";
                //logger.error("imgString###@: " +img);
                //byte[] bytes = img.getBytes();
                byte[] bytes = this.toBytes(img);
                bis = new ByteArrayInputStream(bytes);
                byte[] b = new byte[10 * 1024];
                while (bis.read(b, 0, 10240) != -1) {
                    bos.write(b, 0, 10240);
                }
                bos.flush();
            }
            /*ResourceInstance camera = resourceInstanceService.getResourceInstance(instanceId);
			String channelId = camera.getDiscoverPropBykey("channelId")[0];
			con = getConnection(camera);
			stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery("select vqdImage from v_vqd_lastresult where channelId = '" + channelId + "'");// 返回SQL语句查询结果集(集合)
			while (rs.next()) {
				bis = rs.getBinaryStream(1);
				byte[] b = new byte[10 * 1024];
				while (bis.read(b, 0, 10240) != -1) {
					bos.write(b, 0, 10240);
				}
				bos.flush();
			}*/
			return;
		} catch (Exception e) {
			logger.error("Get Camera Picture Failed:" + e.getMessage());
		} finally {
			try {
				if (bis != null) {
					bis.close();
				}
				if (bos != null) {
					bos.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Close IO Exception:" + e.getMessage());
			}
		}
	}


    /**
     * 将16进制字符串转换为byte[]
     *
     * @param str
     * @return
     */
    private  byte[] toBytes(String str) {
        if(str == null || str.trim().equals("")) {
            return new byte[0];
        }

        byte[] bytes = new byte[str.length() / 2];
        for(int i = 0; i < str.length() / 2; i++) {
            String subStr = str.substring(i * 2, i * 2 + 2);
            bytes[i] = (byte) Integer.parseInt(subStr, 16);
        }

        return bytes;
    }

	@RequestMapping({ "/getalarmFileInputStream" })
	public void getalarmFileInputStream(HttpServletRequest request, HttpServletResponse response) {
		String id = request.getParameter("instanceId").toString();
		//String timestamp = request.getParameter("time").toString();
		long instanceId = 0L;
		if (id != null) {
			instanceId = Long.parseLong(id);
		}
		Connection con = null;
		Statement stmt = null;
		InputStream bis = null;
		BufferedOutputStream bos = null;
		try {
			//Date date = new Date(Long.parseLong(timestamp));
			//String startTime = df.format(date) + ".000";
			//String endTime = df.format(date) + ".999";
			bos = new BufferedOutputStream(response.getOutputStream());
            MetricData metricData = metricDataService.catchRealtimeMetricData(instanceId, "lastImage");
            String[] data = metricData.getData();
            if(data != null && data.length > 0){
                String img = data[0];
                byte[] bytes = this.toBytes(img);
                bis = new ByteArrayInputStream(bytes);
                byte[] b = new byte[10 * 1024];
                while (bis.read(b, 0, 10240) != -1) {
                    bos.write(b, 0, 10240);
                }
                bos.flush();
            }
			//ResourceInstance camera = resourceInstanceService.getResourceInstance(instanceId);
			//String channelId = camera.getDiscoverPropBykey("channelId")[0];
			//con = getConnection(camera);
			//stmt = con.createStatement();
			//ResultSet rs = stmt.executeQuery("select vqdImage from v_vqd_result where channelId = '" + channelId
			//		+ "' and (vqdTime between '" + startTime + "' and '" + endTime + "')");// 返回SQL语句查询结果集(集合)
			/*while (rs.next()) {
				bis = rs.getBinaryStream(1);
				byte[] b = new byte[10 * 1024];
				while (bis.read(b, 0, 10240) != -1) {
					bos.write(b, 0, 10240);
				}
				bos.flush();
			}*/
			return;
		} catch (Exception e) {
			logger.error("Get Alart Camera picture failed:" ,e);
		} finally {
			try {
				if (bis != null) {
					bis.close();
				}
				if (bos != null) {
					bos.close();
				}
				if (stmt != null) {
					stmt.close();
				}
				if (con != null) {
					con.close();
				}
			} catch (Exception e) {
				logger.error("Close IO Exception:" ,e);
			}
		}
	}

	public Connection getConnection(ResourceInstance camera) {
		Connection con = null;
		try {
			Class.forName("com.microsoft.jdbc.sqlserver.SQLServerDriver");
			String userName = camera.getDiscoverPropBykey("dbUsername")[0];
			String password = SecureUtil.pwdDecrypt(camera.getDiscoverPropBykey("dbPassword")[0]);
			String ipAddress = camera.getDiscoverPropBykey("IP")[0];
			String jdbcPort = camera.getDiscoverPropBykey("jdbcPort")[0];
			String dbName = camera.getDiscoverPropBykey("dbName")[0];
			String url = "jdbc:microsoft:sqlserver://" + ipAddress + ":" + jdbcPort + ";databaseName=" + dbName;
			con = DriverManager.getConnection(url, userName, password);
		} catch (ClassNotFoundException e) {
			logger.error("Get JDBC driver failed, please check "+ e.getMessage());
		} catch (SQLException e) {
			logger.error("Get SQL Server connection failed, please check "+ e.getMessage());
		}
		return con;
	}

	public CustomGroupVo toVo(CustomGroupBo bo) {
		CustomGroupVo vo = new CustomGroupVo();
		vo.setId(bo.getId());
		vo.setName(bo.getName());
		vo.setResourceInstanceIds(bo.getResourceInstanceIds());
		vo.setEntryId(bo.getEntryId());
		vo.setEntryDatetime(bo.getEntryDatetime());
		vo.setGroupType(bo.getGroupType().toString());
		vo.setPid(bo.getPid());
		return vo;
	}

	private void voList2Tree(CustomGroupVo parentVo, List<CustomGroupVo> voList) {
		List<CustomGroupVo> childCustomGroupVo = new ArrayList();
		for (int i = 0; i < voList.size(); i++) {
			CustomGroupVo vo = (CustomGroupVo) voList.get(i);
			if ((vo.getPid() != null) && (parentVo.getId().longValue() == vo.getPid().longValue())) {
				childCustomGroupVo.add(vo);
				voList2Tree(vo, voList);
			}
		}
		parentVo.setChildCustomGroupVo(childCustomGroupVo);
	}
}
