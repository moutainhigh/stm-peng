<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="platformSeqFactory" class="com.mainsteam.stm.platform.sequence.service.SequenceFactory">
		<constructor-arg>
			<bean class="com.mainsteam.stm.platform.sequence.dao.impl.SequenceDaoImpl">
				<constructor-arg ref="sqlSession"/>
			</bean>
		</constructor-arg>
		<constructor-arg ref="lockService" />
	</bean>
	
	<bean name="platformSequence" factory-bean="platformSeqFactory" factory-method="getSeq" >
		<constructor-arg value="STM_DEMO_USER"></constructor-arg>
	</bean>
	
	<!-- 配置线程池
	1、 如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。
    2、 如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。
    3、如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。
    4、 如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。
    5、 当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。 -->
	<bean id ="threadExecutor"  class ="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" >
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
	    <!-- 最大线程数，默认为Integer.MAX_VALUE -->
  		<property name="maxPoolSize" value="500" />
  		<!-- 线程池维护线程所允许的空闲时间  默认60 -->  
  		<property name ="keepAliveSeconds" value ="60" />
  		<!-- 线程池所使用的缓冲队列  默认 Integer.MAX_VALUE--> 
 		<property name="queueCapacity" value="200" />
	</bean>
	
	<bean id="dictApi" class="com.mainsteam.stm.platform.dict.service.impl.DictImpl">
		<property name="dictDao">
			<bean class="com.mainsteam.stm.platform.dict.dao.impl.DictDaoImpl">
				<constructor-arg ref="sqlSession"></constructor-arg>
			</bean>
		</property>
	</bean>
	
	<bean id="systemConfigApi" class="com.mainsteam.stm.platform.system.config.service.impl.SystemConfigImpl">
		<property name="systemConfigDao">
			<bean class="com.mainsteam.stm.platform.system.config.dao.impl.SystemConfigDaoImpl">
				<constructor-arg ref="sqlSession"></constructor-arg>
			</bean>
		</property>
	</bean>
</beans>
