<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
            http://www.springframework.org/schema/context    
            http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/util   
            http://www.springframework.org/schema/util/spring-util-3.1.xsd   
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd   
            http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
            "
	default-autowire="byName">
	
	<!--multi database support-->
	<bean id="vendorProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
	    <property name="locations">
	      <list>
			<value>classpath:properties/vendorProperties.properties</value>
	      </list>
	    </property>
 	</bean>
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
	    <property name="properties" ref="vendorProperties"/>
	</bean>
			
<!-- sqlite start -->
	
	<bean id="sqliteMyBatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="sqliteTransactionDataSourceProxy" />
		<property name="configLocation" value="classpath:META-INF/services/mybatis-configuration.xml" />
		<property name="mapperLocations" value="classpath*:com/mainsteam/stm/**/sqlite/*.xml" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	
	<bean id="sqliteSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqliteMyBatisSqlSessionFactory"></constructor-arg>
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mainsteam.stm.knowledge.zip.dao.sqlite" />
		<property name="sqlSessionFactoryBeanName" value="sqliteMyBatisSqlSessionFactory" />
	</bean>
	<!-- sqlite end -->
	
	<bean id="myBatisSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="transactionDataSourceProxy" />
		<property name="configLocation" value="classpath:META-INF/services/mybatis-configuration.xml" />
		<property name="mapperLocations" value="classpath*:com/mainsteam/stm/**/dao/*.xml" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="myBatisSqlSessionFactory"></constructor-arg>
	</bean>
	<bean id="sqlSessionBatch" class="org.mybatis.spring.SqlSessionTemplate">
		 <constructor-arg index="0" ref="myBatisSqlSessionFactory" />
         <constructor-arg index="1" value="BATCH" />
	</bean>
	<!-- 查找类路径下的映射器并自动将它们创建成MapperFactoryBeans MapperScannerConfigurer支持过滤由指定的创建接口或注解创建映射器。 
		annotationClass属性指定了要寻找的注解名称。 markerInterface属性指定了要寻找的父接口。 默认情况下，这两个属性都是null,所以在基包中给定的所有接口可以作为映射器加载。 
		被发现的映射器将会使用Spring对自动侦测组件默认的命名策略来命名。 也就是说，如果没有发现注解，它就会使用映射器的非大写的非完全限定类名。 但是如果发现了@Component或JSR-330@Named注解，它会获取名称。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mainsteam.stm.*.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="myBatisSqlSessionFactory" />
	</bean>
	
	
	<!-- 流量分析 sqlsession 配置 begin 
	<bean id="portal_netflow_SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="portal_netflow_transactionDataSourceProxy" />
		<property name="configLocation" value="classpath:META-INF/services/mybatis-configuration.xml" />
		<property name="mapperLocations" value="classpath*:com/mainsteam/stm/**/dao/*.xml" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	
	<bean id="portal_netflow_sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="portal_netflow_SqlSessionFactory"></constructor-arg>
	</bean>-->

	<!-- 查找类路径下的映射器并自动将它们创建成MapperFactoryBeans MapperScannerConfigurer支持过滤由指定的创建接口或注解创建映射器。 
		annotationClass属性指定了要寻找的注解名称。 markerInterface属性指定了要寻找的父接口。 默认情况下，这两个属性都是null,所以在基包中给定的所有接口可以作为映射器加载。 
		被发现的映射器将会使用Spring对自动侦测组件默认的命名策略来命名。 也就是说，如果没有发现注解，它就会使用映射器的非大写的非完全限定类名。 但是如果发现了@Component或JSR-330@Named注解，它会获取名称。
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mainsteam.stm.protal.netflow*.*.dao" />
		<property name="sqlSessionFactoryBeanName" value="portal_netflow_SqlSessionFactory" />
	</bean>
	-->
	
	
</beans>
